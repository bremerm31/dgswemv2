set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -std=c++14 -Wall -g")

list (APPEND DG_HYPER_SWE_SOURCES
  ${PROJECT_SOURCE_DIR}/source/problem/SWE/problem_input/swe_inputs.cpp

  ${PROJECT_SOURCE_DIR}/source/preprocessor/mesh_metadata.cpp
  ${PROJECT_SOURCE_DIR}/source/preprocessor/ADCIRC_reader/adcirc_format.cpp

  ${PROJECT_SOURCE_DIR}/source/simulation/stepper.cpp

  ${PROJECT_SOURCE_DIR}/source/basis/polynomials/basis_polynomials.cpp
  ${PROJECT_SOURCE_DIR}/source/basis/bases_2D/basis_dubiner_2D.cpp

  ${PROJECT_SOURCE_DIR}/source/shape/shapes_2D/shape_straighttriangle.cpp

  ${PROJECT_SOURCE_DIR}/source/integration/integrations_2D/integration_dunavant_2D.cpp
  ${PROJECT_SOURCE_DIR}/source/integration/integrations_1D/integration_gausslegendre_1D.cpp
)

add_executable(
  MANUFACTURED_SOLUTION_SERIAL
  ${PROJECT_SOURCE_DIR}/examples/manufactured_solution/manufactured_main_swe.cpp
  ${DG_HYPER_SWE_SOURCES}
)

target_include_directories(MANUFACTURED_SOLUTION_SERIAL PRIVATE ${YAML_CPP_INCLUDE_DIR})  
target_link_libraries(MANUFACTURED_SOLUTION_SERIAL ${YAML_CPP_LIBRARIES})

if(USE_OMPI)
  add_executable(
    MANUFACTURED_SOLUTION_OMPI
    ${PROJECT_SOURCE_DIR}/examples/manufactured_solution/manufactured_ompi_main_swe.cpp
    ${DG_HYPER_SWE_SOURCES}
    ${PROJECT_SOURCE_DIR}/source/communication/ompi_communicator.cpp
  )

  target_include_directories(MANUFACTURED_SOLUTION_OMPI PRIVATE ${YAML_CPP_INCLUDE_DIR} ${MPI_CXX_INCLUDE_PATH})  
  target_link_libraries(MANUFACTURED_SOLUTION_OMPI ${YAML_CPP_LIBRARIES} ${MPI_CXX_LIBRARIES})

  install(TARGETS MANUFACTURED_SOLUTION_OMPI DESTINATION bin)
endif()

if(USE_HPX)
  add_executable(
    MANUFACTURED_SOLUTION_HPX
    ${PROJECT_SOURCE_DIR}/examples/manufactured_solution/manufactured_hpx_main_swe.cpp
    ${DG_HYPER_SWE_SOURCES}
    ${PROJECT_SOURCE_DIR}/source/communication/hpx_communicator.cpp
  )

  hpx_setup_target(
    MANUFACTURED_SOLUTION_HPX
    COMPONENT_DEPENDENCIES iostreams
  )

  set_target_properties(MANUFACTURED_SOLUTION_HPX PROPERTIES COMPILE_FLAGS "-DHAS_HPX")

  target_include_directories(MANUFACTURED_SOLUTION_HPX PRIVATE ${YAML_CPP_INCLUDE_DIR} ${HPX_INCLUDE_DIRS})  
  target_link_libraries(MANUFACTURED_SOLUTION_HPX ${YAML_CPP_LIBRARIES} ${HPX_LIBRARIES})

  install(TARGETS MANUFACTURED_SOLUTION_HPX DESTINATION bin)
endif()

install(TARGETS MANUFACTURED_SOLUTION_SERIAL DESTINATION bin)
